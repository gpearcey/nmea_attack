var searchIndex = JSON.parse('{\
"nmea_attack":{"doc":"nmea_attack","t":"HFFAAFFFFFFRRDFFLLFMMMLLLLMMMLLLF","n":["MSG_PTR","link_msg_buffer","main","native_functions","nmea_msg","AddAppDelay","GetMsg","PrintInt32","PrintStr","RemoveAppDelay","SendMsg","ID_LENGTH","MAX_DATA_LENGTH_BYTES","NMEAMsg","PrintInt32","PrintStr","borrow","borrow_mut","chars_to_nmea","controller_num","data","data_length_bytes","default","fmt","from","into","pgn","priority","source","try_from","try_into","type_id","unicode_convert"],"q":[[0,"nmea_attack"],[5,"nmea_attack::native_functions"],[11,"nmea_attack::nmea_msg"]],"d":["Points to a message requested from the native read queue","links MSG_PTR to the buffer allocated for the wasm app","Main execution loop","Links to native C++ functions that can be called from the …","Contains a struct to represent a NMEA message and …","","Puts a new message in the wasm app buffer from the read …","Prints an integer. Used for debugging purposes.","Prints a char array as a string. Used for debugging …","","Sends a NMEA message and specifies the controller queue it …","","","Represents a NMEA 2000 Message","","","","","Converts a char array to a NMEA message","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Converts a unicode number to the actual value it …"],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,0],"f":[0,[[1,2]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[1,2],3],0,0,0,[[],3],[[3,4],5],[[]],[[]],0,0,0,[[],6],[[],6],[[],7],[1,1]],"c":[],"p":[[15,"u8"],[15,"i32"],[3,"NMEAMsg"],[3,"Formatter"],[6,"Result"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
